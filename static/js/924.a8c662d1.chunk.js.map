{"version":3,"file":"static/js/924.a8c662d1.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Login/Login.module.css?0ede","components/Login/Login.jsx","webpack://my-app/./src/utils/FormComponents.module.css?c2d9","utils/FormComponents.js","utils/Validation.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Login_container__2a92S\",\"content\":\"Login_content__Cf1JV\",\"loginInfo\":\"Login_loginInfo__TJx40\"};","import React, {useState} from \"react\";\r\nimport {Form, Formik} from \"formik\";\r\nimport {Checkbox, TextInput} from \"../../utils/FormComponents\";\r\nimport s from './Login.module.css'\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {validateLogin} from \"../../utils/Validation\";\r\n\r\n\r\nconst LoginForm = (props) => {\r\n    const [status, changeStatus] = useState('')\r\n\r\n    return <Formik\r\n        initialValues={{\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captchaText: ''\r\n        }}\r\n        validate={validateLogin}\r\n        onSubmit={(values, actions) => {\r\n            props.login(values.email, values.password, values.rememberMe, values.captchaText, (newStatus) => {\r\n                changeStatus(newStatus)\r\n            })\r\n            actions.setFieldValue('password', '')\r\n        }}>\r\n        <Form>\r\n            <TextInput\r\n                label='E-mail - '\r\n                name='email'\r\n                type='text'\r\n                placeholder='Enter E-mail here'\r\n            />\r\n            <TextInput\r\n                label='Password - '\r\n                name='password'\r\n                type='password'\r\n                placeholder='Enter password here'\r\n            />\r\n            <Checkbox name='rememberMe'>\r\n                Remember me?\r\n            </Checkbox>\r\n            {props.captchaUrl && <div>\r\n                <img src={props.captchaUrl} alt={\"captcha code\"}/>\r\n                <TextInput\r\n                    label='Captcha - '\r\n                    name='captchaText'\r\n                    type='text'\r\n                    placeholder='Enter CAPTCHA code here'\r\n                />\r\n            </div>}\r\n            <div>\r\n                {status}\r\n            </div>\r\n            <div>\r\n                <button>Submit</button>\r\n            </div>\r\n        </Form>\r\n    </Formik>\r\n}\r\n\r\nconst Login = ({isAuth, login, captchaUrl}) => {\r\n    if (isAuth) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n    return <div className={s.container}>\r\n        <div className={s.content}>\r\n            <h1>\r\n                Login\r\n            </h1>\r\n            <div>\r\n                <LoginForm login={login} captchaUrl={captchaUrl}/>\r\n            </div>\r\n        </div>\r\n        <div className={s.loginInfo}>\r\n            <div>\r\n                You can test the site with this login information:\r\n            </div>\r\n            <div>Email: free@samuraijs.com\r\n\r\n                Password: free</div>\r\n        </div>\r\n    </div>\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n    isAuthErrorToggled: state.auth.isAuthErrorToggled\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login)","// extracted by mini-css-extract-plugin\nexport default {\"textInput\":\"FormComponents_textInput__3Qh+h\",\"textInputErrorMessage\":\"FormComponents_textInputErrorMessage__NARsf\"};","import {useField} from \"formik\";\r\nimport React from \"react\";\r\nimport s from './FormComponents.module.css'\r\n\r\n\r\n\r\nexport const TextInput = ({label, handleBlur, ...props}) => {\r\n    let [field, meta] = useField(props)\r\n    return <div>\r\n        <label htmlFor={props.id || props.name}>{label}</label>\r\n        <input className={s.textInput} onBlur={handleBlur} {...field} {...props}/>\r\n        {meta.touched && meta.error && <div className={s.textInputErrorMessage}> {meta.error} </div>}\r\n    </div>\r\n}\r\n\r\nexport const SelectInput = ({label, ...props}) => {\r\n    let [field, meta] = useField(props)\r\n    return <div>\r\n        <label htmlFor={props.id || props.name}>{label}</label>\r\n        <select {...field} {...props}/>\r\n        {meta.touched && meta.error && <div className='error'>{meta.error}</div>}\r\n    </div>\r\n}\r\nexport const Checkbox = ({children, ...props}) => {\r\n    let [field, meta] = useField({...props, type: \"checkbox\"})\r\n    return <div>\r\n        <label className='checkBoxInput'>\r\n            <input type={'checkbox'} {...field} {...props}/>{children}\r\n        </label>\r\n        {meta.touched && meta.error && <div className={'error'}>{meta.error}</div>}\r\n    </div>\r\n}\r\n","export const validateLogin = values => {\r\n    const errors = {};\r\n\r\n    if (!values.email) {\r\n        errors.email = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n    if (!values.password) {\r\n        errors.password = 'Required'\r\n    }\r\n    return errors;\r\n};\r\n\r\nexport const validateProfileInfo = values => {\r\n    const errors = {contacts: {}};\r\n\r\n    if (!values.fullName) {\r\n        errors.fullName = 'Required';\r\n    }\r\n    if (!values.aboutMe) {\r\n        errors.aboutMe = 'Required'\r\n    }\r\n    if (!values.lookingForAJobDescription) {\r\n        errors.lookingForAJobDescription = 'Required'\r\n    }\r\n\r\n    Object.entries(values.contacts).map(([key, value]) => {\r\n        if ((value) && (!RegExp(`^https://${key}.com\\/`).test(values.contacts[key]))) {\r\n            errors.contacts[key] = `Invalid URL format - ${key}`\r\n        }\r\n    })\r\n\r\n    if(Object.keys(errors).length === 1 && Object.keys(errors.contacts).length === 0){\r\n        return {}\r\n    }\r\n\r\n    return errors;\r\n};"],"names":["LoginForm","props","_useState","useState","_useState2","_slicedToArray","status","changeStatus","_jsx","Formik","initialValues","email","password","rememberMe","captchaText","validate","validateLogin","onSubmit","values","actions","login","newStatus","setFieldValue","children","_jsxs","Form","TextInput","label","name","type","placeholder","Checkbox","captchaUrl","src","alt","connect","state","auth","isAuth","isAuthErrorToggled","_ref","Navigate","to","className","s","handleBlur","_objectWithoutProperties","_excluded","_useField","useField","_useField2","field","meta","htmlFor","id","_objectSpread","onBlur","touched","error","_ref3","_excluded3","_useField5","_useField6","errors","test","validateProfileInfo","contacts","fullName","aboutMe","lookingForAJobDescription","Object","entries","map","_ref2","key","RegExp","concat","keys","length"],"sourceRoot":""}